!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	2	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
2001	.\1107.f90	/^    2001 continue$/;"	l	subroutine:fluidField	file:
4000	.\1107.f90	/^  4000 continue$/;"	l	subroutine:gser	file:
4001	.\1107.f90	/^  4001 continue$/;"	l	subroutine:gcf	file:
ahff	.\1107.f90	/^  double precision, dimension(mz) :: ahff,/;"	v	module:public_val
ampd	.\1107.f90	/^  double precision, dimension(mz) :: ampu, ampd$/;"	v	module:public_val
ampu	.\1107.f90	/^  double precision, dimension(mz) :: ampu,/;"	v	module:public_val
arebound	.\1107.f90	/^function arebound(/;"	f
atac	.\fluid.f90	/^  real(dpc), dimension(mz) :: ttac, atac$/;"	v	module:fluid
atat	.\fluid.f90	/^  real(dpc) :: ttat, atat$/;"	v	module:fluid
atau	.\fluid.f90	/^  real(dpc), dimension(mz) :: ttau, atau$/;"	v	module:fluid
atauu	.\fluid.f90	/^  real(dpc), dimension(mz) :: ttauu, atauu$/;"	v	module:fluid
atauw	.\fluid.f90	/^  real(dpc), dimension(mz) :: ttauw, atauw$/;"	v	module:fluid
atavv	.\fluid.f90	/^  real(dpc), dimension(mz) :: ttavv, atavv$/;"	v	module:fluid
ataww	.\fluid.f90	/^  real(dpc), dimension(mz) :: ttaww, ataww$/;"	v	module:fluid
aucreep	.\1107.f90	/^  double precision :: aucreep$/;"	v	module:public_val
avepg	.\fluid.f90	/^  real(dpc), dimension(3) :: avepg$/;"	v	module:fluid
aveu	.\fluid.f90	/^  real(dpc), dimension(3) :: aveu$/;"	v	module:fluid
bnldev	.\1107.f90	/^function bnldev(/;"	f
centu	.\fluid.f90	/^  subroutine centu$/;"	s	module:fluid
comm1D	.\1107.f90	/^  integer :: comm1D$/;"	v	module:public_val
conv	.\fluid.f90	/^  subroutine conv(/;"	s	module:fluid
cross_prod	.\1107.f90	/^  function cross_prod(/;"	f	module:vector_cal
cs2	.\fluid.f90	/^  real(dpc), private, dimension(nxdim, my, mz) :: cs2$/;"	v	module:fluid
ctval	.\fluid.f90	/^  real(dpc), dimension(nxdim, my, mz, 3), target :: ctval$/;"	v	module:fluid
dataExType	.\1107.f90	/^subroutine dataExType$/;"	s
diff	.\fluid.f90	/^  subroutine diff(/;"	s	module:fluid
difx	.\fluid.f90	/^  real(dpc), private, dimension(nxdim, my, mz, 3) :: flox, difx,/;"	v	module:fluid
difxx	.\fluid.f90	/^  real(dpc), private, dimension(nxdim, my, mz, 3) :: floxx, difxx,/;"	v	module:fluid
dist_p	.\1107.f90	/^  function dist_p(/;"	f	module:vector_cal
dot_prod	.\1107.f90	/^  function dot_prod(/;"	f	module:vector_cal
dp	.\1107.f90	/^  double precision, dimension(nnpmax) :: dp,/;"	v	module:public_val
dpa	.\1107.f90	/^  double precision, parameter :: dpa /;"	v	module:public_val
dpaa	.\1107.f90	/^  double precision, dimension(mkxNode, mky) :: dpaa$/;"	v	module:public_val
dpdn	.\fluid.f90	/^  subroutine dpdn$/;"	s	module:fluid
dpdx	.\fluid.f90	/^  real(dpc), dimension(nxdim, my, mz), target :: dpdx,/;"	v	module:fluid
dpdy	.\fluid.f90	/^  real(dpc), dimension(nxdim, my, mz), target :: dpdx, dpdy,/;"	v	module:fluid
dpdz	.\fluid.f90	/^  real(dpc), dimension(nxdim, my, mz), target :: dpdx, dpdy, dpdz$/;"	v	module:fluid
dSigma	.\1107.f90	/^  double precision, parameter :: dSigma /;"	v	module:public_val
dt	.\1107.f90	/^  double precision, parameter :: dt /;"	v	module:public_val
eepdfch	.\1107.f90	/^  double precision, dimension(mky*npdf) :: eepdfch,/;"	v	module:public_val
eepdfchr	.\1107.f90	/^  double precision, dimension(mky*npdf) :: eepdfch, eepdfchr$/;"	v	module:public_val
eepnch	.\1107.f90	/^  double precision, dimension(mky) :: eepnch,/;"	v	module:public_val
eepnchr	.\1107.f90	/^  double precision, dimension(mky) :: eepnch, eepnchr$/;"	v	module:public_val
els	.\1107.f90	/^  double precision, parameter :: els /;"	v	module:public_val
els1	.\1107.f90	/^  double precision, parameter :: els1 /;"	v	module:public_val
expdev	.\1107.f90	/^function expdev(/;"	f
ffd	.\1107.f90	/^function ffd(/;"	f
fg	.\1107.f90	/^  double precision, dimension(nnpmax) :: fh, fg,/;"	v	module:public_val
fh	.\1107.f90	/^  double precision, dimension(nnpmax) :: fh,/;"	v	module:public_val
fieldExType	.\1107.f90	/^  integer :: fieldExType$/;"	v	module:public_val
fk	.\1107.f90	/^  double precision, dimension(nnpmax) :: dp, fk,/;"	v	module:public_val
flmx	.\fluid.f90	/^  real(dpc), private, dimension(nxdim, my, mz) :: fmmx, flmx$/;"	v	module:fluid
flox	.\fluid.f90	/^  real(dpc), private, dimension(nxdim, my, mz, 3) :: flox,/;"	v	module:fluid
floxx	.\fluid.f90	/^  real(dpc), private, dimension(nxdim, my, mz, 3) :: floxx,/;"	v	module:fluid
fluid	.\fluid.f90	/^module fluid$/;"	m
fluidField	.\1107.f90	/^subroutine fluidField$/;"	s
fluid_init	.\fluid.f90	/^  subroutine fluid_init$/;"	s	module:fluid
fmmx	.\fluid.f90	/^  real(dpc), private, dimension(nxdim, my, mz) :: fmmx,/;"	v	module:fluid
fptx	.\1107.f90	/^  double precision, dimension(mz) :: fptx$/;"	v	module:public_val
fptx	.\fluid.f90	/^  real(dpc), dimension(nxdim, my, mz) :: fptx,/;"	v	module:fluid
fpty	.\fluid.f90	/^  real(dpc), dimension(nxdim, my, mz) :: fptx, fpty,/;"	v	module:fluid
fptz	.\fluid.f90	/^  real(dpc), dimension(nxdim, my, mz) :: fptx, fpty, fptz$/;"	v	module:fluid
fric	.\1107.f90	/^  double precision, parameter :: fric /;"	v	module:public_val
fric1	.\1107.f90	/^  double precision, parameter :: fric1 /;"	v	module:public_val
ft	.\1107.f90	/^  double precision, dimension(nnpmax) :: fh, fg, ft$/;"	v	module:public_val
fz	.\1107.f90	/^  double precision, dimension(nnpmax) :: dp, fk, fz$/;"	v	module:public_val
gammln	.\1107.f90	/^function gammln(/;"	f
gammp	.\1107.f90	/^function gammp(/;"	f
gammq	.\1107.f90	/^function gammq(/;"	f
gatherx	.\1107.f90	/^  subroutine gatherx(/;"	s	module:gather_xyz
gather_xyz	.\1107.f90	/^module gather_xyz$/;"	m
gcf	.\1107.f90	/^subroutine gcf(/;"	s
generateGrid	.\1107.f90	/^subroutine generateGrid$/;"	s
generateInitBed	.\1107.f90	/^subroutine generateInitBed$/;"	s
gser	.\1107.f90	/^subroutine gser(/;"	s
gtypei	.\1107.f90	/^  integer :: gtypei$/;"	v	module:public_val
gxch	.\1107.f90	/^subroutine gxch(/;"	s
gxyz_int	.\1107.f90	/^  subroutine gxyz_int(/;"	s	module:gather_xyz
gxyz_real	.\1107.f90	/^  subroutine gxyz_real(/;"	s	module:gather_xyz
hru	.\1107.f90	/^  double precision, dimension(mz) :: hru,/;"	v	module:public_val
htao	.\1107.f90	/^  double precision, dimension(mz) :: htao,/;"	v	module:public_val
htaop	.\1107.f90	/^  double precision, dimension(mz) :: htaop,/;"	v	module:public_val
i	.\1107.f90	/^  in/;"	v	program:main
icol	.\1107.f90	/^  integer, parameter :: icol /;"	v	module:public_val
ierr	.\1107.f90	/^  integer :: ierr$/;"	v	program:main
ikbx	.\1107.f90	/^  integer, parameter :: ikbx /;"	v	module:public_val
ikby	.\1107.f90	/^  integer, parameter :: ikby /;"	v	module:public_val
ikbz	.\1107.f90	/^  integer, parameter :: ikbz /;"	v	module:public_val
imgd	.\1107.f90	/^subroutine imgd$/;"	s
initAmp	.\1107.f90	/^  double precision, parameter :: initAmp /;"	v	module:public_val
initAveKz	.\1107.f90	/^  double precision, parameter :: initAveKz /;"	v	module:public_val
initOmg	.\1107.f90	/^  double precision, parameter :: initOmg /;"	v	module:public_val
intType	.\1107.f90	/^  integer :: intType$/;"	v	module:public_val
ipar	.\1107.f90	/^  integer, parameter :: ipar /;"	v	module:public_val
ipd	.\1107.f90	/^  integer, parameter :: ipd /;"	v	module:public_val
irsf	.\1107.f90	/^  integer, parameter :: irsf /;"	v	module:public_val
isp	.\1107.f90	/^  integer, parameter :: isp /;"	v	module:public_val
j	.\1107.f90	/^  integer :: i, j,/;"	v	program:main
k	.\1107.f90	/^  integer :: i, j, k$/;"	v	program:main
kapa	.\1107.f90	/^  double precision, parameter :: kapa /;"	v	module:public_val
kx	.\1107.f90	/^  double precision, dimension(mkxN/;"	v	module:public_val
kxDiff	.\1107.f90	/^  double precision :: kxDiff,/;"	v	module:public_val
ky	.\1107.f90	/^  double precision, dimension(mky)/;"	v	module:public_val
kyDiff	.\1107.f90	/^  double precision :: kxDiff, kyDiff$/;"	v	module:public_val
kz	.\1107.f90	/^  double precision, dimension(mkxNode, mky) :: kz$/;"	v	module:public_val
last	.\1107.f90	/^  integer :: last$/;"	v	module:public_val
main	.\1107.f90	/^program main$/;"	p
mkx	.\1107.f90	/^  integer, parameter :: mkx /;"	v	module:public_val
mkxNode	.\1107.f90	/^  integer, parameter :: mkxNode /;"	v	module:public_val
mky	.\1107.f90	/^  integer, parameter :: mky /;"	v	module:public_val
mpin	.\1107.f90	/^  double precision :: norm_vpin, norm_vpout, vvpin, vvpout, mpin,/;"	v	module:public_val
mpout	.\1107.f90	/^  double precision :: norm_vpin, norm_vpout, vvpin, vvpout, mpin, mpout$/;"	v	module:public_val
mx	.\1107.f90	/^  integer, parameter :: mx /;"	v	module:public_val
mxNode	.\1107.f90	/^  integer, parameter :: mxNode /;"	v	module:public_val
my	.\1107.f90	/^  integer, parameter :: my /;"	v	module:public_val
myerfc	.\1107.f90	/^function myerfc(/;"	f
myID	.\1107.f90	/^  integer :: myID$/;"	v	module:public_val
mz	.\1107.f90	/^  integer, parameter :: mz /;"	v	module:public_val
nbrLeft	.\1107.f90	/^  integer :: nbrLeft,/;"	v	program:main
nbrRight	.\1107.f90	/^  integer :: nbrLeft, nbrRight$/;"	v	program:main
neighbor	.\1107.f90	/^  integer, dimension(2) :: neighbor$/;"	v	module:public_val
nkl	.\1107.f90	/^  double precision, parameter :: nkl /;"	v	module:public_val
nkx	.\1107.f90	/^  integer, parameter :: nkx /;"	v	module:public_val
nky	.\1107.f90	/^  integer, parameter :: nky /;"	v	module:public_val
nnc	.\1107.f90	/^  integer, parameter :: nnc /;"	v	module:public_val
nnf	.\1107.f90	/^  integer, parameter :: nnf /;"	v	module:public_val
nnfi	.\1107.f90	/^  integer, parameter :: nnfi /;"	v	module:public_val
nnfx	.\1107.f90	/^  integer, parameter :: nnfx /;"	v	module:public_val
nnkl	.\1107.f90	/^  integer, parameter :: nnkl /;"	v	module:public_val
nNodes	.\1107.f90	/^  integer, parameter :: nNodes /;"	v	module:public_val
nnp	.\1107.f90	/^  integer :: nnp$/;"	v	module:public_val
nnpmax	.\1107.f90	/^  integer, parameter :: nnpmax /;"	v	module:public_val
nns	.\1107.f90	/^  integer, parameter :: nns /;"	v	module:public_val
nnsf	.\1107.f90	/^  integer, parameter :: nnsf /;"	v	module:public_val
normal	.\1107.f90	/^function normal(/;"	f
norm_2	.\1107.f90	/^  function norm_2(/;"	f	module:vector_cal
norm_vpin	.\1107.f90	/^  double precision :: norm_vpin,/;"	v	module:public_val
norm_vpout	.\1107.f90	/^  double precision :: norm_vpin, norm_vpout,/;"	v	module:public_val
npdf	.\1107.f90	/^  integer, parameter :: npdf /;"	v	module:public_val
npin	.\1107.f90	/^  double precision :: npin,/;"	v	module:public_val
npout	.\1107.f90	/^  double precision :: npin, npout$/;"	v	module:public_val
nspmax	.\1107.f90	/^  integer, parameter :: nspmax /;"	v	module:public_val
ntmixl	.\1107.f90	/^function ntmixl(/;"	f
nu	.\1107.f90	/^  double precision, parameter :: nu /;"	v	module:public_val
nut	.\fluid.f90	/^  real(dpc), dimension(nxdim, my, mz), target :: u, v, w, p, nut$/;"	v	module:fluid
nut_cal	.\fluid.f90	/^  subroutine nut_cal$/;"	s	module:fluid
nx	.\1107.f90	/^  integer, parameter :: nx /;"	v	module:public_val
ny	.\1107.f90	/^  integer, parameter :: ny /;"	v	module:public_val
nz	.\1107.f90	/^  integer, parameter :: nz /;"	v	module:public_val
output	.\1107.f90	/^subroutine output$/;"	s
outPutFile	.\1107.f90	/^subroutine outPutFile$/;"	s
p	.\fluid.f90	/^  real(dpc/;"	v	module:fluid
parcalculate	.\1107.f90	/^subroutine parcalculate$/;"	s
parloc	.\1107.f90	/^subroutine parloc(/;"	s
parsiz	.\1107.f90	/^function parsiz(/;"	f
particleInit	.\1107.f90	/^subroutine particleInit$/;"	s
parvol	.\1107.f90	/^subroutine parvol(/;"	s
pcoll	.\1107.f90	/^  double precision, dimension(mz) :: pcoll,/;"	v	module:public_val
pdf	.\1107.f90	/^  double precision, dimension(mkxNode, mky, npdf)/;"	v	module:public_val
pdfch	.\1107.f90	/^  double precision, dimension(mkxNode, mky, npdf) :: pdfch$/;"	v	module:public_val
periodic	.\1107.f90	/^  logical :: periodic$/;"	v	program:main
phirho	.\1107.f90	/^  double precision, dimension(mxNode, my, mz) :: phirho$/;"	v	module:public_val
phirho	.\fluid.f90	/^  real(dpc), dimension(nxdim, my, mz) :: phirho$/;"	v	module:fluid
pi	.\1107.f90	/^  double precision, parameter :: pi /;"	v	module:public_val
pistart	.\1107.f90	/^  integer, parameter :: pistart /;"	v	module:public_val
pnch	.\1107.f90	/^  double precision, dimension(mkxNode, mky) :: pnch$/;"	v	module:public_val
pNumInit	.\1107.f90	/^  integer, parameter :: pNumInit /;"	v	module:public_val
por	.\1107.f90	/^  double precision, parameter :: por /;"	v	module:public_val
prob	.\1107.f90	/^  double precision, dimension(npdf) :: prob$/;"	v	module:public_val
pstart	.\1107.f90	/^  integer, parameter :: pstart /;"	v	module:public_val
public_val	.\1107.f90	/^module public_val$/;"	m
pxch	.\1107.f90	/^subroutine pxch(/;"	s
p_interpolation	.\fluid.f90	/^  subroutine p_interpolation$/;"	s	module:fluid
realType	.\1107.f90	/^  integer :: realType$/;"	v	module:public_val
rho	.\1107.f90	/^  double precision, parameter :: rho /;"	v	module:public_val
rhos	.\1107.f90	/^  double precision, parameter :: rhos /;"	v	module:public_val
rhsux	.\fluid.f90	/^  real(dpc), dimension(nxdim, my, mz) :: rhsux,/;"	v	module:fluid
rhsuy	.\fluid.f90	/^  real(dpc), dimension(nxdim, my, mz) :: rhsux, rhsuy$/;"	v	module:fluid
rhsvx	.\fluid.f90	/^  real(dpc), dimension(nxdim, my, mz) :: rhsvx,/;"	v	module:fluid
rhsvy	.\fluid.f90	/^  real(dpc), dimension(nxdim, my, mz) :: rhsvx, rhsvy$/;"	v	module:fluid
rhswx	.\fluid.f90	/^  real(dpc), dimension(nxdim, my, mz) :: rhswx,/;"	v	module:fluid
rhswy	.\fluid.f90	/^  real(dpc), dimension(nxdim, my, mz) :: rhswx, rhswy$/;"	v	module:fluid
rhsx	.\fluid.f90	/^  real(dpc), private, dimension(nxdim, my, mz, 3) :: rhsx$/;"	v	module:fluid
rpdf	.\1107.f90	/^  double precision, parameter :: rpdf /;"	v	module:public_val
sorx	.\fluid.f90	/^  real(dpc), private, dimension(nxdim, my, mz, 3) :: flox, difx, sorx$/;"	v	module:fluid
sorxx	.\fluid.f90	/^  real(dpc), private, dimension(nxdim, my, mz, 3) :: floxx, difxx, sorxx$/;"	v	module:fluid
sour	.\fluid.f90	/^  subroutine sour(/;"	s	module:fluid
sstart	.\1107.f90	/^  integer, parameter :: sstart /;"	v	module:public_val
surfexch	.\1107.f90	/^subroutine surfexch$/;"	s
surfExType	.\1107.f90	/^  integer :: surfExType$/;"	v	module:public_val
szpdf	.\1107.f90	/^  double precision, parameter :: szpdf /;"	v	module:public_val
tahff	.\1107.f90	/^  double precision, dimension(mz) :: ahff, tahff$/;"	v	module:public_val
taot	.\1107.f90	/^  double precision :: utaot,/;"	v	module:public_val
thru	.\1107.f90	/^  double precision, dimension(mz) :: hru, thru$/;"	v	module:public_val
thtao	.\1107.f90	/^  double precision, dimension(mz) :: htao, thtao$/;"	v	module:public_val
thtaop	.\1107.f90	/^  double precision, dimension(mz) :: htaop, thtaop$/;"	v	module:public_val
time	.\1107.f90	/^  double precision :: time$/;"	v	module:public_val
tla	.\1107.f90	/^  double precision, parameter :: tla /;"	v	module:public_val
totfptx	.\1107.f90	/^  double precision, dimension(mz) :: totfptx,/;"	v	module:public_val
totvolpar	.\1107.f90	/^  double precision, dimension(mz) :: totfptx, totvolpar$/;"	v	module:public_val
tot_mpin	.\1107.f90	/^  double precision :: tot_nvpin, tot_nvpout, tot_vvpin, tot_vvpout, tot_mpin,/;"	v	module:public_val
tot_mpout	.\1107.f90	/^  double precision :: tot_nvpin, tot_nvpout, tot_vvpin, tot_vvpout, tot_mpin, tot_mpout$/;"	v	module:public_val
tot_npin	.\1107.f90	/^  double precision :: tot_npin,/;"	v	module:public_val
tot_npout	.\1107.f90	/^  double precision :: tot_npin, tot_npout$/;"	v	module:public_val
tot_nvpin	.\1107.f90	/^  double precision :: tot_nvpin,/;"	v	module:public_val
tot_nvpout	.\1107.f90	/^  double precision :: tot_nvpin, tot_nvpout,/;"	v	module:public_val
tot_vpin	.\1107.f90	/^  double precision, dimension(3) :: tot_vpin,/;"	v	module:public_val
tot_vpout	.\1107.f90	/^  double precision, dimension(3) :: tot_vpin, tot_vpout$/;"	v	module:public_val
tot_vvpin	.\1107.f90	/^  double precision :: tot_nvpin, tot_nvpout, tot_vvpin,/;"	v	module:public_val
tot_vvpout	.\1107.f90	/^  double precision :: tot_nvpin, tot_nvpout, tot_vvpin, tot_vvpout,/;"	v	module:public_val
tstf	.\fluid.f90	/^  subroutine tstf(/;"	s	module:fluid
ttac	.\fluid.f90	/^  real(dpc), dimension(mz) :: ttac,/;"	v	module:fluid
ttat	.\fluid.f90	/^  real(dpc) :: ttat,/;"	v	module:fluid
ttau	.\fluid.f90	/^  real(dpc), dimension(mz) :: ttau,/;"	v	module:fluid
ttauu	.\fluid.f90	/^  real(dpc), dimension(mz) :: ttauu,/;"	v	module:fluid
ttauw	.\fluid.f90	/^  real(dpc), dimension(mz) :: ttauw,/;"	v	module:fluid
ttavv	.\fluid.f90	/^  real(dpc), dimension(mz) :: ttavv,/;"	v	module:fluid
ttaww	.\fluid.f90	/^  real(dpc), dimension(mz) :: ttaww,/;"	v	module:fluid
ttpcoll	.\1107.f90	/^  double precision, dimension(mz) :: pcoll, ttpcoll$/;"	v	module:public_val
tutao	.\fluid.f90	/^  real(dpc), dimension(3) :: tutao$/;"	v	module:fluid
u	.\fluid.f90	/^  real(dpc), dimension(nxdim, my, mz), target :: u,/;"	v	module:fluid
uc	.\fluid.f90	/^  real(dpc), private, dimension(nxdim, my, mz) :: uc,/;"	v	module:fluid
ucreep	.\1107.f90	/^  double precision, dimension(mkxNode, mky) :: ucreep,/;"	v	module:public_val
uf	.\fluid.f90	/^  real(dpc), dimension(nxdim, my, mz), target :: uf,/;"	v	module:fluid
uflx	.\1107.f90	/^  double precision :: uflx,/;"	v	module:public_val
uflxz	.\1107.f90	/^  double precision, dimension(mz) :: uflxz$/;"	v	module:public_val
ufx	.\fluid.f90	/^  real(dpc), private, dimension(nxdim, my, mz) :: ufx,/;"	v	module:fluid
unit_vec	.\1107.f90	/^  function unit_vec(/;"	f	module:vector_cal
up	.\1107.f90	/^  double precision, dimension(nnpmax) :: up,/;"	v	module:public_val
utao	.\fluid.f90	/^  real(dpc), dimension(nxdim, my, mz), target :: utao$/;"	v	module:fluid
utaosf	.\fluid.f90	/^  real(dpc), dimension(xpdim, ypnum), target :: utaosf$/;"	v	module:fluid
utaot	.\1107.f90	/^  double precision :: utaot,/;"	v	module:public_val
ux	.\fluid.f90	/^  real(dpc), private, dimension(nxdim, my, mz) :: ux,/;"	v	module:fluid
ux_cal	.\fluid.f90	/^  subroutine ux_cal$/;"	s	module:fluid
ux_correction	.\fluid.f90	/^  subroutine ux_correction$/;"	s	module:fluid
u_cal	.\fluid.f90	/^  subroutine u_cal$/;"	s	module:fluid
u_correction	.\fluid.f90	/^  subroutine u_correction$/;"	s	module:fluid
u_interpolation	.\fluid.f90	/^  subroutine u_interpolation$/;"	s	module:fluid
v	.\fluid.f90	/^  real(dpc), dimension(nxdim, my, mz), target :: u, v,/;"	v	module:fluid
val_in_cell	.\fluid.f90	/^  subroutine val_in_cell(/;"	s	module:fluid
vc	.\fluid.f90	/^  real(dpc), private, dimension(nxdim, my, mz) :: uc, vc,/;"	v	module:fluid
vcreep	.\1107.f90	/^  double precision, dimension(mkxNode, mky) :: ucreep, vcreep$/;"	v	module:public_val
vector_cal	.\1107.f90	/^module vector_cal$/;"	m
vf	.\fluid.f90	/^  real(dpc), dimension(nxdim, my, mz), target :: uf, vf,/;"	v	module:fluid
vfx	.\fluid.f90	/^  real(dpc), private, dimension(nxdim, my, mz) :: ufx, vfx,/;"	v	module:fluid
vp	.\1107.f90	/^  double precision, dimension(nnpmax) :: up, vp,/;"	v	module:public_val
vpin	.\1107.f90	/^  double precision, dimension(3) :: vpin,/;"	v	module:public_val
vpout	.\1107.f90	/^  double precision, dimension(3) :: vpin, vpout$/;"	v	module:public_val
vvpin	.\1107.f90	/^  double precision :: norm_vpin, norm_vpout, vvpin,/;"	v	module:public_val
vvpout	.\1107.f90	/^  double precision :: norm_vpin, norm_vpout, vvpin, vvpout,/;"	v	module:public_val
vx	.\fluid.f90	/^  real(dpc), private, dimension(nxdim, my, mz) :: ux, vx,/;"	v	module:fluid
w	.\fluid.f90	/^  real(dpc), dimension(nxdim, my, mz), target :: u, v, w,/;"	v	module:fluid
wavl	.\1107.f90	/^  double precision, parameter :: wavl /;"	v	module:public_val
wc	.\fluid.f90	/^  real(dpc), private, dimension(nxdim, my, mz) :: uc, vc, wc$/;"	v	module:fluid
wf	.\fluid.f90	/^  real(dpc), dimension(nxdim, my, mz), target :: uf, vf, wf$/;"	v	module:fluid
wflx	.\1107.f90	/^  double precision :: uflx, wflx$/;"	v	module:public_val
wflxz	.\1107.f90	/^  double precision, dimension(mz) :: wflxz$/;"	v	module:public_val
wfx	.\fluid.f90	/^  real(dpc), private, dimension(nxdim, my, mz) :: ufx, vfx, wfx$/;"	v	module:fluid
wind	.\1107.f90	/^  double precision, parameter :: wind /;"	v	module:public_val
wp	.\1107.f90	/^  double precision, dimension(nnpmax) :: up, vp, wp$/;"	v	module:public_val
wx	.\fluid.f90	/^  real(dpc), private, dimension(nxdim, my, mz) :: ux, vx, wx$/;"	v	module:fluid
x	.\1107.f90	/^  double precision, dimension(mxN/;"	v	module:public_val
xDiff	.\1107.f90	/^  double precision :: xDiff,/;"	v	module:public_val
xMax	.\1107.f90	/^  double precision, parameter :: xMax /;"	v	module:public_val
xp	.\1107.f90	/^  double precision, dimension(nnpmax) :: xp,/;"	v	module:public_val
xu	.\1107.f90	/^  double precision, dimension(mxNode+1) :: xu$/;"	v	module:public_val
y	.\1107.f90	/^  double precision, dimension(my)/;"	v	module:public_val
yDiff	.\1107.f90	/^  double precision :: xDiff, yDiff$/;"	v	module:public_val
yMax	.\1107.f90	/^  double precision, parameter :: yMax /;"	v	module:public_val
yp	.\1107.f90	/^  double precision, dimension(nnpmax) :: xp, yp,/;"	v	module:public_val
yv	.\1107.f90	/^  double precision, dimension(my+1) :: yv$/;"	v	module:public_val
z	.\1107.f90	/^  double precision, dimension(mz)/;"	v	module:public_val
zDiff	.\1107.f90	/^  double precision, dimension(mz) :: zDiff$/;"	v	module:public_val
zGridCtrl	.\1107.f90	/^  double precision, parameter :: zGridCtrl /;"	v	module:public_val
zMax	.\1107.f90	/^  double precision, parameter :: zMax /;"	v	module:public_val
zp	.\1107.f90	/^  double precision, dimension(nnpmax) :: xp, yp, zp$/;"	v	module:public_val
zpdf	.\1107.f90	/^  double precision, dimension(mkxNode, mky) :: zpdf$/;"	v	module:public_val
zu	.\1107.f90	/^  double precision, parameter :: zu /;"	v	module:public_val
zw	.\1107.f90	/^  double precision, dimension(mz+1) :: zw$/;"	v	module:public_val
